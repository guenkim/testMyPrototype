server.servlet.context-path=/
server.port=8082


################################################################
#       db 설정 :
################################################################
# maria db
#spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
#spring.datasource.url=jdbc:mariadb://localhost:3306/gallary
#spring.datasource.username=root
#spring.datasource.password=1234

# HikariCP settings (optional)
#spring.datasource.hikari.connection-timeout=20000
#spring.datasource.hikari.maximum-pool-size=5


# H2 DB 설정
# JPA Configuration
#spring.datasource.url=jdbc:h2:file:/data/demo;AUTO_SERVER=true
#spring.datasource.username=sa
#spring.datasource.password=
#spring.datasource.driver-class-name=org.h2.Driver

# ORACLE DB 설정
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@127.0.0.1:1521/xe
spring.datasource.username=geun
spring.datasource.password=geun


# HikariCP settings (optional)
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=5

################################################################
#       hibernate 설정
################################################################
# Hibernate 설정: 데이터베이스 스키마 자동 업데이트 및 SQL 관련 옵션들
spring.jpa.hibernate.ddl-auto=update
# Hibernate의 실행하는 SQL 쿼리를 콘솔에 출력합니다.
#spring.jpa.properties.hibernate.show_sql=true
# 출력된 SQL 쿼리를 읽기 쉽게 형식화합니다.
#spring.jpa.properties.hibernate.format_sql=true
# SQL 쿼리에 주석을 추가하여 Hibernate이 실행한 JPQL(Java Persistence Query Language)을 기록합니다.
spring.jpa.properties.hibernate.use_sql_comments=true

################################################################
#       쿼리 파라미터 로그 설정 ( p6spy )
################################################################
logging.level.p6spy=debug
decorator.datasource.p6spy.enable-logging=true


#################################################################
#       Security Configuration
################################################################
spring.security.user.password=1

################################################################
#       Springdoc 설정
################################################################
# Springdoc Configuration
springdoc.default-consumes-media-type=application/json;charset=UTF-8
springdoc.default-produces-media-type=application/json;charset=UTF-8
springdoc.paths-to-match=/**
springdoc.swagger-ui.path=/
springdoc.swagger-ui.display-request-duration=true
springdoc.swagger-ui.groups-order=desc
springdoc.swagger-ui.operations-sorter=alpha
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.api-docs.groups.enabled=true		

################################################################
# application이 로드하도록 설정 , 프로퍼티 파일의 위치 지정
# 이렇게 설정하면 application.properties 처럼 자동으로 읽어들일 수 있음
# springboot 2.4 이상
################################################################
spring.config.import=./error/code.properties

################################################################
#업다운로드 파일 설정
################################################################
# 개별 파일당 최대 크기
# 기본값: 1MB
spring.servlet.multipart.max-file-size = 20MB

# HTTP 요청당 최대 크기
# 기본값: 10MB
spring.servlet.multipart.max-request-size = 100MB

# 서버에서 Multipart Request를 허용할지 여부
# 기본값: true
spring.servlet.multipart.enabled = true

# 파일의 임시 저장 경로
#spring.servlet.multipart.location =

# 파일 또는 매개변수 접근 시 Multipart Request를 게으르게 해결할지 여부
# 기본값: false
spring.servlet.multipart.resolve-lazily = false

# 파일을 디스크에 쓸 때까지의 임계값
# 기본값: 0B
#spring.servlet.multipart.file-size-threshold = 0B

# 파일 업로드 위치
upload.serverDir=\\todo\\file

